# preprocessor's dircetives

snippet #i "#include" bA
#include <$1>
$0
endsnippet

snippet #l "#include" bA
#include "$1"
$0
endsnippet

snippet #d "#define" bA
#define $0
endsnippet

snippet #ifd "#ifdef" bA
#ifdef $0
endsnippet

snippet #ifn "#ifndef" bA
#ifndef $0
endsnippet

snippet #e "#endif" bA
#endif
endsnippet

snippet #pd  "Recursive include protection" bA
#ifndef $1
#define $1

$0

#endif // #ifndef $1
endsnippet

# main

snippet main "main func"
int main() {
  $0
}
endsnippet

snippet argmain "main with args"
int main(int argc, char** argv) {
  $0
}
endsnippet

# control expressions

snippet whl "while loop"
while ($1) {
  $2
}$0
endsnippet

snippet for "for loop"
for ($1) {
  $2
}$0
endsnippet

snippet fori "for loop"
for (int $1 = 0; $1 < $2; ++$1) {
  $3
}$0
endsnippet

snippet if "if statement"
if ($1) {
  $2
}$0
endsnippet

snippet else "else statement"
else {
  $1
}$0
endsnippet

snippet elif "else if statement"
else if ($1) {
  $2
}$0
endsnippet

snippet sct "class declaration"
typedef struct {
  $0
} $1
endsnippet

snippet ret "return" wA
return`!p if t[1] and t[1][0] != ';' and t[1][0] != ' ':
  snip.rv = ' '
else:
  snip.rv = ''`$1
endsnippet

snippet cont "continue" wA
continue;
endsnippet

# types

snippet *8 "int8_t" wA
int8_t $0
endsnippet

snippet *16 "int16_t" wA
int16_t $0
endsnippet

snippet *32 "int32_t" wA
int32_t $0
endsnippet

snippet *64 "int64_t" wA
int64_t $0
endsnippet

snippet *128 "int128_t" wA
__int128 $0
endsnippet

snippet !8 "uint8_t" wA
uint8_t $0
endsnippet

snippet !16 "uint16_t" wA
uint16_t $0
endsnippet

snippet !32 "uint32_t" wA
uint32_t $0
endsnippet

snippet !64 "uint64_t" wA
uint64_t $0
endsnippet

snippet !128 "uint128_t" wA
__uint128 $0
endsnippet
